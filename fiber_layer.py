# -*- coding: utf-8 -*-
"""
/***************************************************************************
 FiberLayer
								 A QGIS plugin
 Creates empty Vector layer with preset fiber templates
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
							  -------------------
		begin				 : 2025-02-12
		git sha				 : $Format:%H$
		copyright			 : (C) 2025 by Jonah Gallagher
		email				 : jonah1810@hotmail.com
 ***************************************************************************/

/***************************************************************************
 *																		   *
 *	 This program is free software; you can redistribute it and/or modify  *
 *	 it under the terms of the GNU General Public License as published by  *
 *	 the Free Software Foundation; either version 2 of the License, or	   *
 *	 (at your option) any later version.								   *
 *																		   *
 ***************************************************************************/
"""
import sys
import os
import processing
from qgis.core import *
from PyQt5.QtCore import *
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon, QColor
from qgis.PyQt.QtWidgets import QAction, QFileDialog
from random import randrange


# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .fiber_layer_dialog import FiberLayerDialog
from .fiber_layer_poles import FiberLayerPoles
from .fiber_layer_drawFiber import FiberLayerDrawFiber
from .fiber_layer_addFiberLayer import AddFiberLayer
import os.path


class FiberLayer:
	"""QGIS Plugin Implementation."""

	def __init__(self, iface):
		"""Constructor.

		:param iface: An interface instance that will be passed to this class
			which provides the hook by which you can manipulate the QGIS
			application at run time.
		:type iface: QgsInterface
		"""
		# Save reference to the QGIS interface
		self.iface = iface
		# initialize plugin directory
		self.plugin_dir = os.path.dirname(__file__)
		# initialize locale
		locale = QSettings().value('locale/userLocale')[0:2]
		locale_path = os.path.join(
			self.plugin_dir,
			'i18n',
			'FiberLayer_{}.qm'.format(locale))

		if os.path.exists(locale_path):
			self.translator = QTranslator()
			self.translator.load(locale_path)
			QCoreApplication.installTranslator(self.translator)

		# Declare instance attributes
		self.actions = []
		self.menu = self.tr(u'&Fiber Layer')

		# Check if plugin was started the first time in current QGIS session
		# Must be set in initGui() to survive plugin reloads
		self.first_start = None

	# noinspection PyMethodMayBeStatic
	def tr(self, message):
		"""Get the translation for a string using Qt translation API.

		We implement this ourselves since we do not inherit QObject.

		:param message: String for translation.
		:type message: str, QString

		:returns: Translated version of message.
		:rtype: QString
		"""
		# noinspection PyTypeChecker,PyArgumentList,PyCallByClass
		return QCoreApplication.translate('FiberLayer', message)


	def add_action(
		self,
		icon_path,
		text,
		callback,
		enabled_flag=True,
		add_to_menu=True,
		add_to_toolbar=True,
		status_tip=None,
		whats_this=None,
		parent=None):
		"""Add a toolbar icon to the toolbar.

		:param icon_path: Path to the icon for this action. Can be a resource
			path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
		:type icon_path: str

		:param text: Text that should be shown in menu items for this action.
		:type text: str

		:param callback: Function to be called when the action is triggered.
		:type callback: function

		:param enabled_flag: A flag indicating if the action should be enabled
			by default. Defaults to True.
		:type enabled_flag: bool

		:param add_to_menu: Flag indicating whether the action should also
			be added to the menu. Defaults to True.
		:type add_to_menu: bool

		:param add_to_toolbar: Flag indicating whether the action should also
			be added to the toolbar. Defaults to True.
		:type add_to_toolbar: bool

		:param status_tip: Optional text to show in a popup when mouse pointer
			hovers over the action.
		:type status_tip: str

		:param parent: Parent widget for the new action. Defaults None.
		:type parent: QWidget

		:param whats_this: Optional text to show in the status bar when the
			mouse pointer hovers over the action.

		:returns: The action that was created. Note that the action is also
			added to self.actions list.
		:rtype: QAction
		"""

		icon = QIcon(icon_path)
		action = QAction(icon, text, parent)
		action.triggered.connect(callback)
		action.setEnabled(enabled_flag)

		if status_tip is not None:
			action.setStatusTip(status_tip)

		if whats_this is not None:
			action.setWhatsThis(whats_this)

		if add_to_toolbar:
			# Adds plugin icon to Plugins toolbar
			self.iface.addToolBarIcon(action)

		if add_to_menu:
			self.iface.addPluginToVectorMenu(
				self.menu,
				action)

		self.actions.append(action)

		return action

	def initGui(self):
		"""Create the menu entries and toolbar icons inside the QGIS GUI."""

		icon_path = ':/plugins/fiber_layer/icon.png'
		self.add_action(
			icon_path,
			text=self.tr(u'Create Fiber Project'),
			callback=self.run,
			parent=self.iface.mainWindow())
			
		icon_path = ':/plugins/fiber_layer/icon.png'
		self.add_action(
			icon_path,
			text=self.tr(u'Relabel Poles'),
			callback=self.relabelPoles,
			parent=self.iface.mainWindow(),
			add_to_toolbar=True)
		icon_path = ':/plugins/fiber_layer/icon.png'
		
		self.add_action(
			icon_path,
			text=self.tr(u'Draw Fiber'),
			callback=self.drawFiber,
			parent=self.iface.mainWindow(),
			add_to_toolbar=True)
			
		self.add_action(
			icon_path,
			text=self.tr(u'Add Fiber Layer'),
			callback=self.addFiberLayer,
			parent=self.iface.mainWindow(),
			add_to_toolbar=True)

		# will be set False in run()
		self.first_start = True


	def unload(self):
		"""Removes the plugin menu item and icon from QGIS GUI."""
		for action in self.actions:
			self.iface.removePluginVectorMenu(
				self.tr(u'&Fiber Layer'),
				action)
			self.iface.removeToolBarIcon(action)



	#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------		
	
	
	
	def run(self):
		"""Run method that performs all the real work"""

		# Create the dialog with elements (after translation) and keep reference
		# Only create GUI ONCE in callback, so that it will only load when the plugin is started
		if self.first_start == True:
			self.first_start = False
		self.dlg = FiberLayerDialog()

		self.dlg.chooseFileButton.clicked.connect(self.getFileName)
		self.dlg.generateButton.clicked.connect(self.generateLayers)
		# show the dialog
		self.dlg.show()
		# Run the dialog event loop
		result = self.dlg.exec_()
		# See if OK was pressed
		if result:
			# Do something useful here - delete the line containing pass and
			# substitute with your code.
			pass
			
	def getFileName(self):
		file_filter = None
		response = QFileDialog.getExistingDirectory(
			None,
			caption = 'Select a folder'
		)
		self.dlg.saveDirectoryInput.setText(str(response))
		
	   
	def generateLayers(self):
		dir = self.dlg.saveDirectoryInput.text()
		print(dir)
		self.generateGroundCab(dir)
		self.generatePoleCab(dir)
		self.generateFOSC(dir)
		self.generatePoles(dir)
		self.generateFiber(dir)
		self.generateDropBoxes(dir)
		self.dlg.close()
		
	def generateGroundCab(self, dir):
	
		vl = QgsVectorLayer("Point", "Ground Cabinets", "memory")
		pr = vl.dataProvider()
		# Enter editing mode
		vl.startEditing()
		# add fields
		pr.addAttributes( [ QgsField("Site ID", QVariant.String),
						QgsField("Location",  QVariant.String),
						QgsField("Pole #",	QVariant.String),
						QgsField("Cabinet ID",	QVariant.String),
						QgsField("Fiber Run",  QVariant.Int),
						QgsField("Sections",  QVariant.Int),
						QgsField("Core Count",	QVariant.Int) ] )
		#add Action	  
		acScopes = ("Feature", "Field", "Form")
		acScopeIt = iter(acScopes)
		
		acManager = vl.actions()
		
		acActor = QgsAction(QgsAction.OpenUrl,"Display Splice Doc", "C:/Users/jonah/Documents/Qgis/Test/SpliceBox/[%'Site ID'%]-[%'Pole #'%]-[%'Cabinet ID'%].xls",	 None, False, None, acScopeIt)
		acManager.addAction(acActor)
		
		#stylize
		single_symbol_renderer = vl.renderer()
		symbol = single_symbol_renderer.symbol()
		#set fill color
		symbol.setColor(QColor.fromRgb(253, 191, 111))
		#setSize
		symbol.setSize(10)
		#set Shape
		symbol.symbolLayer(0).setShape(QgsSimpleMarkerSymbolLayerBase.Shield)
		vl.triggerRepaint()
		self.iface.layerTreeView().refreshLayerSymbology(vl.id())
		

		# Commit changes
		vl.commitChanges()
		# Show in project
		QgsProject.instance().addMapLayer(vl)
		
		Fl_ou = 'GroundCabinets.shp'
		Fl_ou = dir + '/' + Fl_ou
		
		options = QgsVectorFileWriter.SaveVectorOptions()
		options.driverName = "ESRI Shapefile"

		QgsVectorFileWriter.writeAsVectorFormatV3(vl, Fl_ou, QgsCoordinateTransformContext(), options)
		vl.setDataSource(Fl_ou, vl.name(), 'ogr')
		
	
	def generatePoleCab(self, dir):
	
		vl = QgsVectorLayer("Point", "Pole Cabinets", "memory")
		pr = vl.dataProvider()
		# Enter editing mode
		vl.startEditing()
		# add fields
		pr.addAttributes( [ QgsField("Site ID", QVariant.String),
						QgsField("Location",  QVariant.String),
						QgsField("Pole #",	QVariant.String),
						QgsField("Cabinet ID",	QVariant.String),
						QgsField("Fiber Run",  QVariant.Int),
						QgsField("Sections",  QVariant.Int),
						QgsField("Core Count",	QVariant.Int) ] )
		#add Action			
		acScopes = ("Feature", "Field", "Form")
		acScopeIt = iter(acScopes)		  
		acManager = vl.actions()
		acActor = QgsAction(QgsAction.OpenUrl,"Display Splice Doc", "C:/Users/jonah/Documents/Qgis/Test/SpliceBox/[%'Site ID'%]-[%'Pole #'%]-[%'Cabinet ID'%].xls",	 None, False, None, acScopeIt)
		acManager.addAction(acActor)
		
		#stylize
		single_symbol_renderer = vl.renderer()
		symbol = single_symbol_renderer.symbol()
		#set fill color
		symbol.setColor(QColor.fromRgb(253, 191, 111))
		#setSize
		symbol.setSize(10)
		#set Shape
		symbol.symbolLayer(0).setShape(QgsSimpleMarkerSymbolLayerBase.Pentagon)
		vl.triggerRepaint()
		self.iface.layerTreeView().refreshLayerSymbology(vl.id())
		
		# Commit changes
		vl.commitChanges()
		# Show in project
		QgsProject.instance().addMapLayer(vl)
		
		Fl_ou = 'PoleCabinets.shp'
		Fl_ou = dir + '/' + Fl_ou
		
		options = QgsVectorFileWriter.SaveVectorOptions()
		options.driverName = "ESRI Shapefile"

		QgsVectorFileWriter.writeAsVectorFormatV3(vl, Fl_ou, QgsCoordinateTransformContext(), options)
		vl.setDataSource(Fl_ou, vl.name(), 'ogr')
	
	def generateFOSC(self, dir):
	
		vl = QgsVectorLayer("Point", "FOSC", "memory")
		pr = vl.dataProvider()
		# Enter editing mode
		vl.startEditing()
		# add fields
		pr.addAttributes( [ QgsField("Site ID", QVariant.String),
						QgsField("Location",  QVariant.String),
						QgsField("Pole #",	QVariant.String),
						QgsField("FOSC ID",	 QVariant.String),
						QgsField("Fiber Run",  QVariant.Int),
						QgsField("Sections",  QVariant.Int),
						QgsField("Core Count",	QVariant.Int) ] )
		# actions
		acScopes = ("Feature", "Field", "Form")
		acScopeIt = iter(acScopes)
		
		acManager = vl.actions()
		acActor = QgsAction(QgsAction.OpenUrl,"Display Splice Doc", "C:/Users/jonah/Documents/Qgis/Test/SpliceBox/[%'Site ID'%]-[%'Pole #'%]-[%'FOSC ID'%].xls",  None, False, None, acScopeIt)
		acManager.addAction(acActor)
		
		#stylize
		single_symbol_renderer = vl.renderer()
		symbol = single_symbol_renderer.symbol()
		#set fill color
		symbol.setColor(QColor.fromRgb(150, 112, 66))
		#setSize
		symbol.setSize(8)
		#set Shape
		symbol.symbolLayer(0).setShape(QgsSimpleMarkerSymbolLayerBase.AsteriskFill)
		vl.triggerRepaint()
		self.iface.layerTreeView().refreshLayerSymbology(vl.id())
		
		# Commit changes
		vl.commitChanges()
		# Show in project
		QgsProject.instance().addMapLayer(vl)
		
		Fl_ou = 'FOSC.shp'
		Fl_ou = dir + '/' + Fl_ou
		
		options = QgsVectorFileWriter.SaveVectorOptions()
		options.driverName = "ESRI Shapefile"

		QgsVectorFileWriter.writeAsVectorFormatV3(vl, Fl_ou, QgsCoordinateTransformContext(), options)
		vl.setDataSource(Fl_ou, vl.name(), 'ogr')
	
	def generatePoles(self, dir):
	
			vl = QgsVectorLayer("Point", "Poles", "memory")
			pr = vl.dataProvider()
			# Enter editing mode
			vl.startEditing()
			# add fields
			pr.addAttributes( [ QgsField("Site ID", QVariant.String),
							QgsField("Pole #",	QVariant.String),
							QgsField("Pole ID",	 QVariant.String),
							QgsField("Location",  QVariant.String),
							QgsField("G-Cab ID",  QVariant.String),
							QgsField("P-Cab ID",  QVariant.String),
							QgsField("FOSC ID",	 QVariant.String),
							QgsField("Dropbox ID",	QVariant.String) ] )
			
			#stylize
			single_symbol_renderer = vl.renderer()
			symbol = single_symbol_renderer.symbol()
			#set fill color
			symbol.setColor(QColor.fromRgb(255, 0, 0))
			#setSize
			symbol.setSize(2)
			#set Shape
			#symbol.symbolLayer(0).setShape(QgsSimpleMarkerSymbolLayerBase.AsterixFill)
			vl.triggerRepaint()
			self.iface.layerTreeView().refreshLayerSymbology(vl.id())
			# Commit changes
			vl.commitChanges()
			# Show in project
			QgsProject.instance().addMapLayer(vl)
			
			Fl_ou = 'Poles.shp'
			Fl_ou = dir + '/' + Fl_ou
			
			options = QgsVectorFileWriter.SaveVectorOptions()
			options.driverName = "ESRI Shapefile"

			QgsVectorFileWriter.writeAsVectorFormatV3(vl, Fl_ou, QgsCoordinateTransformContext(), options)
			vl.setDataSource(Fl_ou, vl.name(), 'ogr')
			
		
	
	def generateFiber(self, dir):
	
		root = QgsProject.instance().layerTreeRoot()
		fiberGroup = root.addGroup("Fibers")
		
		coreCounts = []
		coreCount = 24
		rgb = (0 ,255 ,255)
		if self.dlg.checkBox.isChecked() :
			coreCounts.append(1)
		else :
			coreCounts.append(0)
		if self.dlg.checkBox_1.isChecked() :
			coreCounts.append(1)
		else :
			coreCounts.append(0)	
		if self.dlg.checkBox_2.isChecked() :
			coreCounts.append(1)
		else :
			coreCounts.append(0)	  
		if self.dlg.checkBox_3.isChecked() :
			coreCounts.append(1)
		else :
			coreCounts.append(0)	 
		if self.dlg.checkBox_4.isChecked() :
			coreCounts.append(1)
		else :
			coreCounts.append(0) 
		if self.dlg.checkBox_5.isChecked() :
			coreCounts.append(1)
		else :
			coreCounts.append(0)
		if self.dlg.checkBox_6.isChecked() :
			coreCounts.append(1)
		else :
			coreCounts.append(0)
			
 
		for idx, checked in enumerate(coreCounts):

			if checked == 1:
				if idx == 0:
					coreCount = 24
					rgb = (0, 255, 255)
				elif idx == 1:
					coreCount = 48
					rgb = (144, 0, 255)
				elif idx == 2:
					coreCount = 60
					rgb = (0, 153, 0)
				elif idx == 3:
					coreCount = 96
					rgb = (255, 0, 0)
				elif idx == 4:
					coreCount = 144
					rgb = (0, 255, 0)
				elif idx == 5:
					coreCount = 192
					rgb = (0, 0, 255)
				elif idx == 6:
					coreCount = 288
					rgb = (255, 255, 0)
				(r, g, b) = rgb
				fiberName = str(coreCount) + " Count Fiber"
				vl = QgsVectorLayer("LineString", fiberName, "memory")
				pr = vl.dataProvider()
				# Enter editing mode
				vl.startEditing()
				# add fields
				pr.addAttributes( [ QgsField("Site ID", QVariant.String),
								QgsField("Fiber Run",  QVariant.Int),
								QgsField("Section",  QVariant.Int),
								QgsField("Length", QVariant.Double, "double", 10, 3) ] )
				
				#stylize
				single_symbol_renderer = vl.renderer()
				symbol = single_symbol_renderer.symbol()
				#set fill color
				symbol.setColor(QColor.fromRgb(r, g, b))
				#setSize
				symbol.setWidth(1.2)
				#set Shape
				#symbol.symbolLayer(0).setShape(QgsSimpleMarkerSymbolLayerBase.AsterixFill)
				vl.triggerRepaint()
				self.iface.layerTreeView().refreshLayerSymbology(vl.id())
				
				# Commit changes
				vl.commitChanges()
				# Show in project
				QgsProject.instance().addMapLayer(vl, False)
				fiberGroup.addLayer(vl)
				
				Fl_ou =	 fiberName + ".shp"
				Fl_ou = dir + '/' + Fl_ou
				
				options = QgsVectorFileWriter.SaveVectorOptions()
				options.driverName = "ESRI Shapefile"

				QgsVectorFileWriter.writeAsVectorFormatV3(vl, Fl_ou, QgsCoordinateTransformContext(), options)
				vl.setDataSource(Fl_ou, vl.name(), 'ogr')
	
	def generateDropBoxes(self, dir):
	
		vl = QgsVectorLayer("Point", "Drop Boxes", "memory")
		pr = vl.dataProvider()
		# Enter editing mode
		vl.startEditing()
		# add fields
		pr.addAttributes( [ QgsField("Site ID", QVariant.String),
						QgsField("Location",  QVariant.String),
						QgsField("Pole #",	QVariant.String),
						QgsField("Box ID",	QVariant.String),
						QgsField("Fiber Run",  QVariant.Int),
						QgsField("Sections",  QVariant.Int),
						QgsField("Drops",  QVariant.Int) ] )
						
		#add Action		
		acScopes = ("Feature", "Field", "Form")
		acScopeIt = iter(acScopes)
		
		acManager = vl.actions()
		acActor = QgsAction(QgsAction.OpenUrl,"Display Splice Doc", "C:/Users/jonah/Documents/Qgis/Test/SpliceBox/[%'Site ID'%]-[%'Pole #'%]-[%'Box ID'%].xls",	 None, False, None, acScopeIt)
		acManager.addAction(acActor)
		
		#stylize
		single_symbol_renderer = vl.renderer()
		symbol = single_symbol_renderer.symbol()
		#set fill color
		symbol.setColor(QColor.fromRgb(255, 68, 255))
		#setSize
		symbol.setSize(4)
		#set Shape
		symbol.symbolLayer(0).setShape(QgsSimpleMarkerSymbolLayerBase.Diamond)
		vl.triggerRepaint()
		self.iface.layerTreeView().refreshLayerSymbology(vl.id())
		# Commit changes
		vl.commitChanges()
		# Show in project
		QgsProject.instance().addMapLayer(vl)
		
		Fl_ou = 'DropBoxes.shp'
		Fl_ou = dir + '/' + Fl_ou
		
		options = QgsVectorFileWriter.SaveVectorOptions()
		options.driverName = "ESRI Shapefile"

		QgsVectorFileWriter.writeAsVectorFormatV3(vl, Fl_ou, QgsCoordinateTransformContext(), options)
		vl.setDataSource(Fl_ou, vl.name(), 'ogr')
		
		
		
	#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------		
	
	
	
	
	def relabelPoles(self):
	
		if self.first_start == True:
			self.first_start = False
		self.dlg = FiberLayerPoles()

		#events go here
		layers = QgsProject.instance().mapLayers().values()
		for layer in layers:
			self.dlg.layerComboBox.addItem(layer.name(), layer)
		
		self.dlg.directoryButton.clicked.connect(self.getFileName)
		self.dlg.reorderButton.clicked.connect(self.reorderClicked)
		self.dlg.reorderIntoNewLayerButton.clicked.connect(self.reorderIntoNewLayer)
		# show the dialog
		self.dlg.show()
		# Run the dialog event loop
		result = self.dlg.exec_()
		# See if OK was pressed
		if result:
			# Do something useful here - delete the line containing pass and
			# substitute with your code.
			pass
			
	def reorderClicked(self) :
		layer = self.dlg.layerComboBox.currentData()
		poleNumber = int(self.dlg.startPole.text())
		fieldName = "Pole #"
		fid = []
		poleid = []
		polenum = []
		fieldidx = layer.fields().indexFromName(fieldName)
		for feat in layer.getFeatures():
			fid.append(feat.id())
			polenum.append(feat.attributes()[0])
			poleid.append(feat.attributes()[1])
		   
		polenumsorted = sorted(polenum)
   
		with edit(layer):
			for pole in polenumsorted:
				index = polenum.index(pole)
				featid = fid[index]
				if poleNumber < 10 :
					newPoleName = "P00" + str(poleNumber)
				elif poleNumber > 9 and poleNumber < 100:
					newPoleName = "P0" + str(poleNumber)
				elif poleNumber >= 100 :
					newPoleName = "P" + str(poleNumber)
				layer.changeAttributeValue(featid, fieldidx, newPoleName)
				poleNumber += 1	 
		self.dlg.close()
		
	def reorderIntoNewLayer(self):
		layer = self.dlg.layerComboBox.currentData()
		poleNumber = int(self.dlg.startPole.text())
		dir = self.dlg.saveDirectoryInput.text()
		newLayerName = self.dlg.layerName.text()
		fromPole = int(self.dlg.fromPole.text())
		toPole = int(self.dlg.toPole.text())
		
		fieldName = "Pole #"
		fid = []
		poleid = []
		polenum = []
		fieldidx = layer.fields().indexFromName(fieldName)
		for feat in layer.getFeatures():
			for num in range(fromPole, toPole):
				if num < 10 :
					poleName = "P00" + str(num)
				elif num >9 and num < 100 :
					poleName = "P0" + str(num)
				elif num >= 100 :
					poleName = "P" + str(num)
					
				if poleName == feat.attributes()[0] :
					fid.append(feat.id())
			
		layer.selectByIds(fid)	

		newLayer = layer.materialize(QgsFeatureRequest().setFilterFids(layer.selectedFeatureIds()))
		newLayer.setName(newLayerName)
	
		QgsProject.instance().addMapLayer(newLayer)
		layer.removeSelection()
		
		Fl_ou = newLayerName + '.shp'
		Fl_ou = dir + '/' + Fl_ou
		options = QgsVectorFileWriter.SaveVectorOptions()
		options.driverName = "ESRI Shapefile"

		QgsVectorFileWriter.writeAsVectorFormatV3(newLayer, Fl_ou, QgsCoordinateTransformContext(), options)
		newLayer.setDataSource(Fl_ou, newLayer.name(), 'ogr')
		
		fid = []
		for feat in newLayer.getFeatures():
			fid.append(feat.id())
			polenum.append(feat.attributes()[0])
			poleid.append(feat.attributes()[1])
		   
		polenumsorted = sorted(polenum)
						
		with edit(newLayer):
			for pole in polenumsorted:
				index = polenum.index(pole)
				featid = fid[index]
				if poleNumber < 10 :
					newPoleName = "P00" + str(poleNumber)
				elif poleNumber > 9 and poleNumber < 100:
					newPoleName = "P0" + str(poleNumber)
				elif poleNumber >= 100 :
					newPoleName = "P" + str(poleNumber)
				newLayer.changeAttributeValue(featid, fieldidx, newPoleName)
				print(featid, fieldidx, newPoleName)
				poleNumber += 1	 
		self.dlg.close()
		
		
		
	#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------		
	
	
	
	def drawFiber(self):
	
		if self.first_start == True:
			self.first_start = False
		self.dlg = FiberLayerDrawFiber()
		
		#events go here
		layers = QgsProject.instance().mapLayers().values()
		for layer in layers:
			self.dlg.fiberComboBox.addItem(layer.name(), layer)
		for layer in layers:
			self.dlg.poleComboBox.addItem(layer.name(), layer)
		
		self.dlg.drawButton.clicked.connect(self.drawClicked)
		
		# show the dialog
		self.dlg.show()
		# Run the dialog event loop
		result = self.dlg.exec_()
		# See if OK was pressed
		if result:
			# Do something useful here - delete the line containing pass and
			# substitute with your code.
			pass
	

	def drawClicked(self):
		
		fiberLayer = self.dlg.fiberComboBox.currentData()
		poleLayer = self.dlg.poleComboBox.currentData()
		poleStart = int(self.dlg.startPole.text())
		poleEnd = int(self.dlg.endPole.text())
		siteID = self.dlg.siteID.text()
		fiberRun = self.dlg.fiberRun.text()
		section = self.dlg.section.text()
		
		poleGeo = []
		
		# get pole locations
		for x in range (poleStart, poleEnd + 1):
			if x < 10 :
				poleName = "P00" + str(x)
			elif x > 9 and x < 100:
				poleName = "P0" + str(x)
			elif x >= 100 :
				poleName = "P" + str(x)
			featselect = poleLayer.selectByExpression("\"Pole #\" = '{}'".format(poleName))
			feat = poleLayer.selectedFeatures()[0]
			geo = QgsGeometry.asPoint(feat.geometry())
			pxy = QgsPointXY(geo)
			poleGeo.append(pxy)
			
		fiberLayer.startEditing()
		feat = QgsFeature(fiberLayer.fields())
		feat.setAttribute("Site ID", siteID)
		feat.setAttribute("Fiber Run", fiberRun)
		feat.setAttribute("Section", section)
		feat.setGeometry(QgsGeometry.fromPolylineXY(poleGeo))

		distance = QgsDistanceArea()
		distance.setEllipsoid('WGS84')
		geom = feat.geometry()
		length = distance.measureLine(feat.geometry().asPolyline())
		print(length)
		feat.setAttribute("Length", length)
		
		fiberLayer.addFeature(feat)
		fiberLayer.endEditCommand()
		fiberLayer.commitChanges()
		
		self.dlg.close()
	#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
		
	def addFiberLayer(self):
		
		if self.first_start == True:
			self.first_start = False
		self.dlg = AddFiberLayer()
		
		#events go here
		
		self.dlg.chooseFileButton.clicked.connect(self.getFileName)
		self.dlg.generateButton.clicked.connect(self.onGenerateClicked)
		
		# show the dialog
		self.dlg.show()
		# Run the dialog event loop
		result = self.dlg.exec_()
		# See if OK was pressed
		if result:
			# Do something useful here - delete the line containing pass and
			# substitute with your code.
			pass
		
	def onGenerateClicked(self):
		
		dir = self.dlg.saveDirectoryInput.text()
		rootFolder = self.dlg.rootFolder.text()
		fiberRun = self.dlg.fiberRun.text()
		layerName = self.dlg.layerName.text()
		
		root = QgsProject.instance().layerTreeRoot()
		groupFound = False;
		subGroupFound = False;
		#check for group and subgroup and if not exist create it.
		for child in root.children():
			if child.name() == rootFolder:
				groupFound = True
				group = child
				for subChild in child.children():
					if subChild.name() == fiberRun:
						# both group and subgroup exist
						subGroupFound = True
						fiberRunGroup = subChild

		if groupFound == False :
			#group does not exist, create group and subgroup
			group = root.addGroup(rootFolder)
			fiberRunGroup = group.addGroup(fiberRun)
		if groupFound == True and subGroupFound == False :
			fiberRunGroup = group.addGroup(fiberRun)
			
		layer = QgsVectorLayer("MultiPolygon", layerName, "memory")
		pr = layer.dataProvider()
		# Enter editing mode
		layer.startEditing()
		# add fields
		pr.addAttributes( [ QgsField("Site ID", QVariant.String),
						QgsField("Trunk Tube",  QVariant.String),
						QgsField("Trunk Core",	QVariant.String),
						QgsField("Fiber Run",  QVariant.Int),
						QgsField("Sections",  QVariant.Int) ] )
						
	
		fields = layer.fields()
		fni = fields.indexFromName('Trunk Core')
		unique_values = layer.dataProvider().uniqueValues(fni)
		
		colors = [(214,222,243), (29,180,225), (116,185,160), (29,179,141), (116,21,160), (1,0,255), (359,226,227), (1,0,0), (63,181,253), (269,255,255), (349,63,255), (180,255, 255)]
		colorNames = ['Blue', 'Orange', 'Green', 'Brown', 'Grey','White', 'Red','Black', 'Yellow', 'Violet', 'Pink', 'Aqua' ]
		categories = []
		for idx, color in enumerate(colors):
			(h,s,v) = color 
			# initialize the default symbol for this geometry type
			symbol = QgsSymbol.defaultSymbol(layer.geometryType())
			
			# configure a symbol layer
			layer_style = {}
			layer_style['color'] = QColor.fromHsv(h, s, v)
			layer_style['outline'] = '#000000'
			symbol_layer = QgsSimpleFillSymbolLayer.create(layer_style)

			# replace default symbol layer with the configured one
			if symbol_layer is not None:
				symbol.changeSymbolLayer(0, symbol_layer)

			# create renderer object
			category = QgsRendererCategory(colorNames[idx], symbol, str(colorNames[idx]) + ' Core')
			# entry for the list of category items
			categories.append(category)
	
		renderer = QgsCategorizedSymbolRenderer('Trunk Core', categories)

		# assign the created renderer to the layer
		if renderer is not None:
			layer.setRenderer(renderer)

		layer.triggerRepaint()
		
		# Commit changes
		layer.commitChanges()
		# Show in project
		QgsProject.instance().addMapLayer(layer, False)
		fiberRunGroup.addLayer(layer)
		
		Fl_ou = layerName + '.shp'
		Fl_ou = dir + '/' + Fl_ou
		
		options = QgsVectorFileWriter.SaveVectorOptions()
		options.driverName = "ESRI Shapefile"

		QgsVectorFileWriter.writeAsVectorFormatV3(layer, Fl_ou, QgsCoordinateTransformContext(), options)
		layer.setDataSource(Fl_ou, layer.name(), 'ogr')
		
		self.dlg.close()
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	















	
